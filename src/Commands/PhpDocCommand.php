<?php
/**
 * Created by IntelliJ IDEA.
 * User: yoshi
 * Date: 10.02.16
 * Time: 15:53
 */

namespace CodeMine\Commands;


use CodeMine\ConfluenceImporter\Documentation\PageFactory;
use CodeMine\ConfluenceImporter\Documentation\PageTreeFactory;
use CodeMine\ConfluenceImporter\Parser\Parser;
use CodeMine\ConfluenceImporter\Service\Confluence;
use CodeMine\ConfluenceImporter\Service\Confluence\Instance;
use GuzzleHttp\Client;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Exception\InvalidOptionException;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class PhpDocCommand extends Command
{
    /**
     *
     */
    protected function configure()
    {
        $this->setName('phpdoc')
            ->setDescription('Test for args')
            ->addArgument('version', InputArgument::REQUIRED, 'Description for version argument')
            ->addOption('source', 's', InputOption::VALUE_REQUIRED, 'Source xml file generated by PhpDocumentor')
            ->addOption('credentials', 'c', InputOption::VALUE_REQUIRED, 'username:password - Confluence user credentials that has access to desired space')
            ->addOption('space', 'S', InputOption::VALUE_REQUIRED, 'Space key to which pages need to be imported')
            ->addOption('host', 'H', InputOption::VALUE_REQUIRED, 'Confluence instance url')
            ->addOption('parent', 'p', InputOption::VALUE_REQUIRED, 'Identifier of the parent page, if not provided, pages will be created in space root');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $version = $input->getArgument('version');
        $source = $input->getOption('source');
        $credentials = $input->getOption('credentials');
        $space = $input->getOption('space');
        $host = $input->getOption('host');
        $parent = $input->getOption('parent');

        if(!isset($version, $source, $credentials, $space, $host)){
            throw new InvalidOptionException('Invalid options');
        }

        $parser = new Parser($source);
        $classData = $parser->prepareFiles();

        $pageTreeFactory = new PageTreeFactory($classData);
        $namespaceTreeForPages = $pageTreeFactory->namespaceArray();

        $pageFactory = new PageFactory($classData, $namespaceTreeForPages);
        $page = $pageFactory->getPage($version);

        $guzzleClient = $this->getGuzzleClient($host);
        $credentialArray = $this->getCredentials($credentials);
        $instance = new Instance($host, $credentialArray['user'], $credentialArray['password'], FALSE);
        $confluence = new Confluence($guzzleClient, $instance);

        $confluence->createPage($space, $page, $parent);

    }

    private function getGuzzleClient($host)
    {
        $client =  new Client([
            'base_uri' => $host
        ]);

        return $client;
    }

    private function getCredentials($credentials)
    {
        $credential = explode(':', $credentials);

        $login = $credential[0];
        unset($credential[0]);
        $password = implode('', $credential);


        $credential = [
            'user' => $login,
            'password' => $password
        ];

        return $credential;
    }
}